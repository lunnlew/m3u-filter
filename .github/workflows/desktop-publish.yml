name: Desktop Client Build and Publish

on:
  push:
    tags:
      - '*'

jobs:
  build:
    # Add permissions at the job level
    permissions:
      contents: write  # Required for release creation
      
    strategy:
      matrix:
        os: [windows-latest, macos-latest, ubuntu-latest]
    runs-on: ${{ matrix.os }}

    steps:
    - name: Checkout repository
      uses: actions/checkout@v2

    - name: Setup Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '18'

    - name: Install pnpm
      uses: pnpm/action-setup@v2
      with:
        version: 8

    # Add Python environment setup
    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'

    # Add GLib dependencies for Linux/macOS
    - name: Install Linux dependencies (Ubuntu)
      if: matrix.os == 'ubuntu-latest'
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          libglib2.0-dev \
          libgtk-3-dev \
          libwebkit2gtk-4.1-dev \
          libjavascriptcoregtk-4.1-dev \
          libayatana-appindicator3-dev \
          build-essential \
          cmake pkg-config git squashfs-tools \
          linux-modules-extra-$(uname -r) \
          libfuse2 libfuse-dev \
          zsync \
          desktop-file-utils \
          appstream \
          patchelf

    - name: Install macOS dependencies
      if: matrix.os == 'macos-latest'
      run: |
        brew install gtk+3 

    - name: Setup Rust
      uses: actions-rs/toolchain@v1
      with:
        toolchain: stable
        override: true

    - name: Install desktop dependencies
      run: |
        cd desktop
        pnpm install --no-frozen-lockfile
    
    - name: Install frontend dependencies
      run: |
        cd frontend
        pnpm install --no-frozen-lockfile

    - name: Install Backend dependencies
      run: |
        cd backend
        pip install -r requirements.txt --no-cache-dir

    - name: Install PyInstaller
      run: pip install pyinstaller

    # 新增PyInstaller打包步骤
    - name: Build Backend with PyInstaller
      run: |
        cd backend
        pyinstaller --noconfirm --clean pyinstaller.spec
      shell: bash

    - name: Build desktop app
      run: |
        cd desktop
        pnpm build

    - name: Extract tag name
      id: get_tag
      shell: bash
      run: echo "TAG_NAME=${GITHUB_REF##*/}" >> $GITHUB_ENV

    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: desktop-${{ matrix.os }}
        path: |
          ${{ matrix.os == 'windows-latest' && 'desktop/src-tauri/target/release/bundle/msi/*.msi' || '' }}
          ${{ matrix.os == 'windows-latest' && 'desktop/src-tauri/target/release/bundle/nsis/*.exe' || '' }}
          ${{ matrix.os == 'macos-latest' && 'desktop/src-tauri/target/release/bundle/dmg/*.dmg' || '' }}
          ${{ matrix.os == 'ubuntu-latest' && 'desktop/src-tauri/target/release/bundle/deb/*.deb' || '' }}
          ${{ matrix.os == 'ubuntu-latest' && 'desktop/src-tauri/target/release/bundle/rpm/*.rpm' || '' }}

    - name: Create Release
      uses: ncipollo/release-action@v1.14.0
      with:
        allowUpdates: true
        artifacts: |
          ${{ matrix.os == 'windows-latest' && 'desktop/src-tauri/target/release/bundle/msi/*.msi' || '' }}
          ${{ matrix.os == 'windows-latest' && 'desktop/src-tauri/target/release/bundle/nsis/*.exe' || '' }}
          ${{ matrix.os == 'macos-latest' && 'desktop/src-tauri/target/release/bundle/dmg/*.dmg' || '' }}
          ${{ matrix.os == 'ubuntu-latest' && 'desktop/src-tauri/target/release/bundle/deb/*.deb' || '' }}
          ${{ matrix.os == 'ubuntu-latest' && 'desktop/src-tauri/target/release/bundle/rpm/*.rpm' || '' }}
        artifactErrorsFailBuild: true
        token: ${{ secrets.GITHUB_TOKEN }}